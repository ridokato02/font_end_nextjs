'use client';

import { useEffect, useState } from 'react';
import ProductCard from './components/ProductCard';
import { Product } from './types/product';
import { productService } from './lib/products';
import Link from 'next/link';

interface CategorySubItem {
  name: string;
  href?: string;
}

interface CategoryColumn {
  title: string;
  items: CategorySubItem[];
}

interface Category {
  name: string;
  icon: string;
  columns: CategoryColumn[];
}

export default function Home() {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [hoveredCategory, setHoveredCategory] = useState<number | null>(null);
  const [hoverTimeout, setHoverTimeout] = useState<NodeJS.Timeout | null>(null);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await productService.getAllProducts();
        setProducts(response.data);
      } catch (error) {
        console.error('Error fetching products:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, []);

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (hoverTimeout) {
        clearTimeout(hoverTimeout);
      }
    };
  }, [hoverTimeout]);

  // C·∫•u tr√∫c d·ªØ li·ªáu danh m·ª•c v·ªõi c√°c danh m·ª•c con
  const categoriesWithSub: Category[] = [
    {
      name: 'Th·ª±c ph·∫©m ch·ª©c nƒÉng',
      icon: 'üåø',
      columns: [
        {
          title: 'H·ªó Tr·ª£ S·ª©c Kh·ªèe',
          items: [
            { name: 'Vitamin V√† Kho√°ng Ch·∫•t' },
            { name: 'S·ªØa dinh d∆∞·ª°ng' },
            { name: 'B·ªï m·∫Øt' },
            { name: 'B·ªï gan' },
            { name: 'B·ªï n√£o, tƒÉng c∆∞·ªùng tr√≠ nh·ªõ' },
            { name: 'B·ªï tr·ª£ x∆∞∆°ng kh·ªõp' },
            { name: 'H·ªó tr·ª£ ti√™u h√≥a' },
            { name: 'H·ªó tr·ª£ tim m·∫°ch' },
            { name: 'H·ªó tr·ª£ Ti·ªÉu ƒë∆∞·ªùng' },
            { name: 'H·ªó tr·ª£ ƒëi·ªÅu tr·ªã b·ªánh gout' },
            { name: 'Y·∫øn s√†o' },
            { name: 'N·∫•m linh chi' },
            { name: 'Cao H·ªìng S√¢m' },
            { name: 'N∆∞·ªõc H·ªìng S√¢m' },
            { name: 'Tinh d·∫ßu th√¥ng ƒë·ªè' },
            { name: 'ƒê√¥ng tr√πng h·∫° th·∫£o' }
          ]
        },
        {
          title: 'Sinh L√Ω - N·ªôi Ti·∫øt T·ªë',
          items: [
            { name: 'Tinh ch·∫•t h√†u' },
            { name: 'M·∫ßm ƒë·∫≠u n√†nh' },
            { name: 'C√¢n b·∫±ng n·ªôi ti·∫øt t·ªë' },
            { name: 'Vi√™n u·ªëng tƒÉng kh·∫£ nƒÉng th·ª• thai' }
          ]
        },
        {
          title: 'H·ªó tr·ª£ l√†m ƒë·∫πp',
          items: [
            { name: 'T·∫£o bi·ªÉn' },
            { name: 'TƒÉng c√¢n' },
            { name: 'Gi·∫£m c√¢n' },
            { name: 'M·ªçc t√≥c, tr·ªã h√≥i' },
            { name: 'TƒÉng chi·ªÅu cao' },
            { name: 'Nhau Thai C·ª´u' },
            { name: 'S·ªØa Ong Ch√∫a' },
            { name: 'Vi√™n u·ªëng tr·ªã m·ª•n' },
            { name: 'Vi√™n u·ªëng n·ªü ng·ª±c' },
            { name: 'Vi√™n u·ªëng tr·∫Øng da' },
            { name: 'Tinh d·∫ßu hoa anh th·∫£o' },
            { name: 'Vi√™n u·ªëng ch·ªëng n·∫Øng' },
            { name: 'Vi√™n u·ªëng th∆°m c∆° th·ªÉ' },
            { name: 'Dinh d∆∞·ª°ng th·ªÉ h√¨nh' }
          ]
        },
        {
          title: 'Th∆∞∆°ng hi·ªáu',
          items: [
            { name: 'Blackmores' },
            { name: 'Kirkland' },
            { name: 'Healthy Care' },
            { name: 'Orihiro' },
            { name: 'Nature Made' },
            { name: 'DHC' },
            { name: 'Swisse' },
            { name: 'Natrol' },
            { name: 'Bio Island' },
            { name: 'Puritan\'s Pride' },
            { name: 'Schiff' },
            { name: 'Glucosamine' },
            { name: 'T·∫•t c·∫£ (A-Z)', href: '/products?brands=all' }
          ]
        }
      ]
    },
    {
      name: 'Collagen',
      icon: 'üíä',
      columns: [
        {
          title: 'Collagen D·∫°ng N∆∞·ªõc',
          items: [
            { name: 'Collagen N∆∞·ªõc' },
            { name: 'Collagen Vi√™n' },
            { name: 'Collagen B·ªôt' },
            { name: 'Collagen Ch·ªëng N·∫Øng' }
          ]
        },
        {
          title: 'Collagen Theo ƒê·ªô Tu·ªïi',
          items: [
            { name: 'Collagen 20+' },
            { name: 'Collagen 30+' },
            { name: 'Collagen 40+' },
            { name: 'Collagen 50+' }
          ]
        },
        {
          title: 'Th∆∞∆°ng hi·ªáu',
          items: [
            { name: 'Meiji' },
            { name: 'Neocell' },
            { name: 'Shiseido' },
            { name: 'Swisse' }
          ]
        }
      ]
    },
    {
      name: 'M·ªπ ph·∫©m',
      icon: 'üíÑ',
      columns: [
        {
          title: 'ChƒÉm S√≥c Da M·∫∑t',
          items: [
            { name: 'Serum' },
            { name: 'Kem d∆∞·ª°ng ·∫©m' },
            { name: 'Toner' },
            { name: 'S·ªØa r·ª≠a m·∫∑t' },
            { name: 'Kem ch·ªëng n·∫Øng' }
          ]
        },
        {
          title: 'Trang ƒêi·ªÉm',
          items: [
            { name: 'Kem n·ªÅn' },
            { name: 'Ph·∫•n ph·ªß' },
            { name: 'Son m√¥i' },
            { name: 'Ph·∫•n m·∫Øt' }
          ]
        },
        {
          title: 'ChƒÉm S√≥c T√≥c',
          items: [
            { name: 'D·∫ßu g·ªôi' },
            { name: 'D·∫ßu x·∫£' },
            { name: 'M·∫∑t n·∫° t√≥c' }
          ]
        },
        {
          title: 'Th∆∞∆°ng hi·ªáu',
          items: [
            { name: 'Obagi' },
            { name: 'Shiseido' },
            { name: 'Laneige' },
            { name: 'Innisfree' }
          ]
        }
      ]
    },
    {
      name: 'M·∫π v√† B√©',
      icon: 'üë∂',
      columns: [
        {
          title: 'Dinh D∆∞·ª°ng M·∫π B·∫ßu',
          items: [
            { name: 'Vitamin B·∫ßu' },
            { name: 'Vitamin Sau Sinh' },
            { name: 'S·ªØa B·∫ßu' },
            { name: 'L·ª£i S·ªØa' }
          ]
        },
        {
          title: 'ƒê·ªì D√πng Cho B√©',
          items: [
            { name: 'S·ªØa c√¥ng th·ª©c' },
            { name: 'B√¨nh s·ªØa' },
            { name: 'T√£ b·ªâm' },
            { name: 'ƒê·ªì ch∆°i' }
          ]
        },
        {
          title: 'Th∆∞∆°ng hi·ªáu',
          items: [
            { name: 'Aptamil' },
            { name: 'Similac' },
            { name: 'Enfamil' }
          ]
        }
      ]
    },
    {
      name: 'Th·ªùi trang',
      icon: 'üëó',
      columns: [
        {
          title: 'Th·ªùi Trang Nam',
          items: [
            { name: '√Åo s∆° mi' },
            { name: 'Qu·∫ßn √¢u' },
            { name: 'Gi√†y d√©p' }
          ]
        },
        {
          title: 'Th·ªùi Trang N·ªØ',
          items: [
            { name: 'V√°y' },
            { name: '√Åo' },
            { name: 'Gi√†y' }
          ]
        }
      ]
    },
    {
      name: 'ƒê·ªì gia d·ª•ng',
      icon: 'üè†',
      columns: [
        {
          title: 'Nh√† B·∫øp',
          items: [
            { name: 'N·ªìi ch·∫£o' },
            { name: 'D·ª•ng c·ª• n·∫•u ƒÉn' },
            { name: 'ƒê·ªì d√πng nh√† b·∫øp' }
          ]
        },
        {
          title: 'Ph√≤ng T·∫Øm',
          items: [
            { name: 'KhƒÉn t·∫Øm' },
            { name: 'B·ªô ƒë·ªì v·ªá sinh' }
          ]
        }
      ]
    },
    {
      name: 'Nh√† C·ª≠a & ƒê·ªùi S·ªëng',
      icon: 'üè°',
      columns: [
        {
          title: 'N·ªôi Th·∫•t',
          items: [
            { name: 'B√†n gh·∫ø' },
            { name: 'T·ªß k·ªá' },
            { name: 'ƒê√®n' }
          ]
        }
      ]
    },
    {
      name: 'Th·ª±c ph·∫©m - H√†ng ti√™u d√πng',
      icon: 'üõí',
      columns: [
        {
          title: 'Th·ª±c Ph·∫©m',
          items: [
            { name: 'ƒê·ªì kh√¥' },
            { name: 'ƒê·ªì h·ªôp' },
            { name: 'Gia v·ªã' }
          ]
        }
      ]
    },
    {
      name: 'Thi·∫øt b·ªã chƒÉm s√≥c s·ª©c kh·ªèe',
      icon: 'üè•',
      columns: [
        {
          title: 'Thi·∫øt B·ªã Y T·∫ø',
          items: [
            { name: 'M√°y ƒëo huy·∫øt √°p' },
            { name: 'Nhi·ªát k·∫ø' },
            { name: 'M√°y x√¥ng m≈©i' }
          ]
        }
      ]
    },
    {
      name: 'ƒê·ªì th·ªÉ thao - Du l·ªãch',
      icon: '‚öΩ',
      columns: [
        {
          title: 'Th·ªÉ Thao',
          items: [
            { name: 'Qu·∫ßn √°o th·ªÉ thao' },
            { name: 'Gi√†y th·ªÉ thao' },
            { name: 'D·ª•ng c·ª• th·ªÉ thao' }
          ]
        }
      ]
    },
    {
      name: 'S√°ch truy·ªán',
      icon: 'üìö',
      columns: [
        {
          title: 'S√°ch',
          items: [
            { name: 'S√°ch vƒÉn h·ªçc' },
            { name: 'S√°ch k·ªπ nƒÉng' },
            { name: 'Truy·ªán tranh' }
          ]
        }
      ]
    },
    {
      name: 'VƒÉn ph√≤ng ph·∫©m',
      icon: 'üìù',
      columns: [
        {
          title: 'ƒê·ªì D√πng VƒÉn Ph√≤ng',
          items: [
            { name: 'B√∫t' },
            { name: 'V·ªü' },
            { name: 'B√¨a h·ªì s∆°' }
          ]
        }
      ]
    },
    {
      name: 'Thi·∫øt b·ªã - Ph·ª• ki·ªán s·ªë',
      icon: 'üì±',
      columns: [
        {
          title: 'ƒêi·ªán Tho·∫°i',
          items: [
            { name: 'iPhone' },
            { name: 'Samsung' },
            { name: 'Ph·ª• ki·ªán' }
          ]
        }
      ]
    },
    {
      name: 'ƒê·ªìng h·ªì',
      icon: '‚åö',
      columns: [
        {
          title: 'ƒê·ªìng H·ªì',
          items: [
            { name: 'ƒê·ªìng h·ªì nam' },
            { name: 'ƒê·ªìng h·ªì n·ªØ' },
            { name: 'Smartwatch' }
          ]
        }
      ]
    },
    {
      name: 'ChƒÉm s√≥c th√∫ c∆∞ng',
      icon: 'üêï',
      columns: [
        {
          title: 'Th√∫ C∆∞ng',
          items: [
            { name: 'Th·ª©c ƒÉn' },
            { name: 'ƒê·ªì ch∆°i' },
            { name: 'Ph·ª• ki·ªán' }
          ]
        }
      ]
    },
    {
      name: 'ƒêi·ªán m√°y - ƒêi·ªán l·∫°nh',
      icon: '‚ùÑÔ∏è',
      columns: [
        {
          title: 'ƒêi·ªán L·∫°nh',
          items: [
            { name: 'T·ªß l·∫°nh' },
            { name: 'M√°y l·∫°nh' },
            { name: 'M√°y gi·∫∑t' }
          ]
        }
      ]
    },
    {
      name: 'ƒêi·ªán tho·∫°i - M√°y t√≠nh b·∫£ng',
      icon: 'üì±',
      columns: [
        {
          title: 'Thi·∫øt B·ªã',
          items: [
            { name: 'iPhone' },
            { name: 'Samsung' },
            { name: 'iPad' }
          ]
        }
      ]
    },
    {
      name: 'Th∆∞∆°ng hi·ªáu n·ªïi b·∫≠t',
      icon: '‚≠ê',
      columns: [
        {
          title: 'Th∆∞∆°ng Hi·ªáu',
          items: [
            { name: 'Blackmores' },
            { name: 'Obagi' },
            { name: 'Meiji' },
            { name: 'Shiseido' }
          ]
        }
      ]
    }
  ];

  const categoryGrid = [
    { name: 'Th·ª±c ph·∫©m ch·ª©c nƒÉng', icon: 'üåø' },
    { name: 'M·∫π v√† B√©', icon: 'üë∂' },
    { name: 'M·ªπ ph·∫©m', icon: 'üíÑ' },
    { name: 'Th·ªùi trang', icon: 'üëó' },
    { name: 'ƒê·ªì gia d·ª•ng nh√† b·∫øp', icon: 'üç≥' },
    { name: 'Thi·∫øt b·ªã chƒÉm s√≥c s·ª©c kh·ªèe', icon: 'üè•' },
    { name: 'ƒê·ªì th·ªÉ thao - Du l·ªãch', icon: '‚öΩ' },
    { name: 'Th·ª±c ph·∫©m - H√†ng ti√™u d√πng', icon: 'üõí' },
    { name: 'Voucher khuy·∫øn m·∫°i', icon: 'üé´' },
    { name: 'Nh√† C·ª≠a & ƒê·ªùi S·ªëng', icon: 'üè°' },
    { name: 'ChƒÉm s√≥c th√∫ c∆∞ng', icon: 'üêï' },
    { name: 'Thi·∫øt b·ªã - Ph·ª• ki·ªán s·ªë', icon: 'üì±' },
    { name: 'ƒêi·ªán m√°y - ƒêi·ªán l·∫°nh', icon: '‚ùÑÔ∏è' },
    { name: 'VƒÉn ph√≤ng ph·∫©m', icon: 'üìù' },
    { name: '√î t√¥, xe m√°y, xe ƒë·∫°p', icon: 'üöó' },
    { name: 'D·ª•ng c·ª• v√† thi·∫øt b·ªã ti·ªán √≠ch', icon: 'üîß' },
    { name: 'Ng√†nh h√†ng kh√°c', icon: 'üì¶' },
    { name: 'ChƒÉm s√≥c c√° nh√¢n', icon: 'üß¥' }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="flex">
        {/* Left Sidebar - Category List */}
        <div className="w-64 bg-white shadow-lg min-h-screen hidden lg:block relative z-40">
          <div className="p-4">
            <h2 className="text-lg font-bold text-gray-800 mb-4">Danh m·ª•c s·∫£n ph·∫©m</h2>
            <nav className="space-y-1">
              {categoriesWithSub.map((category, index) => (
                <div
                  key={index}
                  className="relative group"
                  onMouseEnter={() => {
                    // Clear any existing timeout
                    if (hoverTimeout) {
                      clearTimeout(hoverTimeout);
                    }
                    setHoveredCategory(index);
                  }}
                  onMouseLeave={() => {
                    // Delay hiding to allow mouse to move to dropdown
                    const timeout = setTimeout(() => {
                      setHoveredCategory(null);
                    }, 100); // 100ms delay
                    setHoverTimeout(timeout);
                  }}
                >
                  <Link
                    href={`/products?category=${encodeURIComponent(category.name)}`}
                    className={`flex items-center justify-between p-3 text-gray-700 hover:bg-red-50 hover:text-red-600 rounded-lg transition-colors ${
                      hoveredCategory === index ? 'bg-red-50 text-red-600' : ''
                    }`}
                  >
                    <div className="flex items-center space-x-3">
                      <span className="text-lg">{category.icon}</span>
                      <span className="text-sm">{category.name}</span>
                    </div>
                    <span className="text-gray-400">‚Ä∫</span>
                  </Link>
                  
                  {/* Invisible bridge between sidebar and dropdown */}
                  {hoveredCategory === index && category.columns && category.columns.length > 0 && (
                    <div
                      className="absolute left-full top-0 w-2 h-full z-50"
                      onMouseEnter={() => {
                        if (hoverTimeout) {
                          clearTimeout(hoverTimeout);
                        }
                        setHoveredCategory(index);
                      }}
                    />
                  )}
                  
                  {/* Dropdown Menu - Multi-column */}
                  {hoveredCategory === index && category.columns && category.columns.length > 0 && (
                    <div
                      className="absolute left-full top-0 ml-0 bg-white shadow-2xl border border-gray-200 rounded-lg p-8 z-50"
                      style={{ 
                        minWidth: `${Math.min(category.columns.length, 4) * 200}px`,
                        maxWidth: '900px'
                      }}
                      onMouseEnter={() => {
                        // Clear timeout when mouse enters dropdown
                        if (hoverTimeout) {
                          clearTimeout(hoverTimeout);
                        }
                        setHoveredCategory(index);
                      }}
                      onMouseLeave={() => {
                        // Delay hiding dropdown
                        const timeout = setTimeout(() => {
                          setHoveredCategory(null);
                        }, 100);
                        setHoverTimeout(timeout);
                      }}
                    >
                      <div 
                        className="grid gap-8"
                        style={{ gridTemplateColumns: `repeat(${Math.min(category.columns.length, 4)}, minmax(180px, 1fr))` }}
                      >
                        {category.columns.map((column, colIndex) => (
                          <div key={colIndex} className="min-w-0">
                            <h3 className="font-bold text-gray-900 mb-4 text-sm uppercase border-b-2 border-red-600 pb-2">
                              {column.title}
                            </h3>
                            <ul className="space-y-2.5">
                              {column.items.map((item, itemIndex) => (
                                <li key={itemIndex}>
                                  {item.href ? (
                                    <Link
                                      href={item.href}
                                      className="text-gray-700 hover:text-red-600 text-sm block py-1.5 transition-colors whitespace-nowrap"
                                    >
                                      {item.name}
                                    </Link>
                                  ) : (
                                    <Link
                                      href={`/products?category=${encodeURIComponent(category.name)}&subcategory=${encodeURIComponent(item.name)}`}
                                      className="text-gray-700 hover:text-red-600 text-sm block py-1.5 transition-colors whitespace-nowrap"
                                    >
                                      {item.name}
                                    </Link>
                                  )}
                                </li>
                              ))}
                            </ul>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </nav>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1">
          <main className="w-full">
            {/* Main Banner Section */}
        <section className="bg-gradient-to-r from-blue-400 to-blue-600 text-white py-8">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex flex-col lg:flex-row gap-6">
              {/* Main Banner */}
              <div className="flex-1 bg-gradient-to-r from-blue-500 to-blue-700 rounded-lg p-8 relative overflow-hidden min-h-[300px]">
                <div className="relative z-10">
                  <h1 className="text-2xl lg:text-3xl font-bold mb-4">GI·ªöI THI·ªÜU NH√Ä B√ÅN H√ÄNG M·ªöI</h1>
                  <p className="text-lg lg:text-xl mb-2">Nh·∫≠n Qu√† Ngay T·ª´ Chiaki!</p>
                  <p className="text-sm mb-6">Khuy·∫øn m√£i ƒë·∫∑c bi·ªát cho nh√† b√°n h√†ng m·ªõi</p>
                  <button className="bg-yellow-400 text-black px-6 py-3 rounded-lg font-semibold hover:bg-yellow-300 transition-colors flex items-center">
                    <span className="mr-2">‚ñ∂</span>
                    GI·ªöI THI·ªÜU NGAY
                  </button>
                </div>
                {/* Decorative elements */}
                <div className="absolute top-4 right-4 bg-yellow-400 text-black px-3 py-1 rounded text-sm font-bold">
                  T·∫∂NG 1 TRI·ªÜU
                </div>
                <div className="absolute bottom-4 right-4 bg-yellow-400 text-black px-3 py-1 rounded text-sm font-bold">
                  T·∫∂NG 50K
                </div>
              </div>

              {/* Right Side Banners */}
              <div className="w-full lg:w-80 space-y-4">
                <div className="bg-blue-500 rounded-lg p-6 text-center hover:bg-blue-600 transition-colors cursor-pointer">
                  <h3 className="font-bold text-lg mb-2">OBAGI SALE UPTO 30%</h3>
                  <p className="text-sm">M·ªπ ph·∫©m cao c·∫•p</p>
                </div>
                <div className="bg-green-500 rounded-lg p-6 text-center hover:bg-green-600 transition-colors cursor-pointer">
                  <h3 className="font-bold text-lg mb-2">BLACKMORES</h3>
                  <p className="text-sm">ChƒÉm s√≥c s·ª©c kh·ªèe to√†n di·ªán</p>
                  <p className="text-yellow-300 font-bold mt-2">GI·∫¢M T·ªöI 30%</p>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Vitamin Banner */}
        <section className="bg-white py-6 border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex flex-col md:flex-row items-center justify-between bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-6 gap-4">
              <div className="flex items-center space-x-4">
                <div className="text-2xl font-bold text-blue-600">Chiaki.vn</div>
                <div>
                  <h2 className="text-lg md:text-xl font-bold text-gray-800">B·ªî SUNG VITAMIN V√Ä KHO√ÅNG CH·∫§T</h2>
                  <p className="text-xs md:text-sm text-gray-600">M·∫∏ B·∫¶U KH·ªéE M·∫†NH, B√â Y√äU PH√ÅT TRI·ªÇN</p>
                </div>
              </div>
              <div className="flex flex-col md:flex-row items-center space-y-2 md:space-y-0 md:space-x-4">
                <div className="text-center md:text-right">
                  <p className="text-red-600 font-bold text-lg">GI·∫¢M T·ªöI 30%</p>
                  <div className="flex flex-wrap justify-center md:justify-end gap-2 mt-2">
                    <button className="bg-blue-500 text-white px-3 py-1 rounded text-xs md:text-sm hover:bg-blue-600 transition-colors">VITAMIN B·∫¶U</button>
                    <button className="bg-blue-500 text-white px-3 py-1 rounded text-xs md:text-sm hover:bg-blue-600 transition-colors">VITAMIN SAU SINH</button>
                    <button className="bg-blue-500 text-white px-3 py-1 rounded text-xs md:text-sm hover:bg-blue-600 transition-colors">L·ª¢I S·ªÆA</button>
                  </div>
                </div>
                <button className="bg-red-600 text-white px-6 py-2 rounded font-bold hover:bg-red-700 transition-colors">MUA NGAY</button>
              </div>
            </div>
          </div>
        </section>

        {/* Categories Section */}
        <section className="bg-white py-8">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl md:text-2xl font-bold text-gray-800">DANH M·ª§C</h2>
              <button className="text-red-600 hover:text-red-700 text-sm md:text-base font-medium flex items-center">
                Xem t·∫•t c·∫£
                <span className="ml-1">‚Ä∫</span>
              </button>
            </div>
            <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-9 gap-4">
              {categoryGrid.map((category, index) => (
                <div key={index} className="text-center p-4 hover:bg-gray-50 rounded-lg cursor-pointer transition-colors group">
                  <div className="w-12 h-12 sm:w-16 sm:h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-2 text-xl sm:text-2xl group-hover:bg-red-50 transition-colors">
                    {category.icon}
                  </div>
                  <p className="text-xs sm:text-sm text-gray-700 group-hover:text-red-600 transition-colors">{category.name}</p>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Flash Sale Section */}
        <section className="bg-white py-8">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
              <div className="flex flex-wrap items-center gap-4">
                <h2 className="text-xl md:text-2xl font-bold text-gray-800 flex items-center">
                  <span className="text-red-500 mr-2 text-2xl">‚ö°</span>
                  FLASH SALE
                </h2>
                <div className="bg-blue-600 text-white px-4 py-2 rounded font-bold text-sm">
                  ONLY THIS WEEKEND FLASH SALE
                </div>
              </div>
              <button className="bg-red-600 text-white px-4 py-2 rounded font-bold hover:bg-red-700 transition-colors text-sm md:text-base">
                Xem th√™m
              </button>
            </div>

            {loading ? (
              <div className="flex justify-center items-center py-12">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>
              </div>
            ) : (
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
                {products.slice(0, 6).map((product) => (
                  <ProductCard key={product.id} product={product} />
                ))}
              </div>
            )}
          </div>
        </section>

        {/* Popular Products Section */}
        <section className="bg-white py-8 border-t">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl md:text-2xl font-bold text-gray-800">S·∫¢N PH·∫®M N·ªîI B·∫¨T</h2>
              <button className="text-red-600 hover:text-red-700 text-sm md:text-base font-medium flex items-center">
                Xem t·∫•t c·∫£
                <span className="ml-1">‚Ä∫</span>
              </button>
            </div>

            {loading ? (
              <div className="flex justify-center items-center py-12">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>
              </div>
            ) : (
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
                {products.slice(6, 12).map((product) => (
                  <ProductCard key={product.id} product={product} />
                ))}
              </div>
            )}
          </div>
        </section>
      </main>
        </div>
      </div>
    </div>
  );
}
